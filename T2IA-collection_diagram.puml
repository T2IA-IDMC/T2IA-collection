@startuml classes
set namespaceSeparator none

' collection.py

abstract class Collection {
  + items: dict
  + load(file_path)
  + save(file_path)
  + filter(criteria)
}

class CardCollection {
  + postcards: dict[str, Postcard]
  + load(file_path)
  + save(file_path)
  + filter_by_tags(tags)
  + filter_by_keywords(keywords)
  + filter_by_town(town)
  + filter_by_department(department)
  + filter_by_region(region)
}

' postcard.py

class Postcard {
  + path: str
  + name: str
  + orientation ?
  + annotations: Annotations
  + get_annotations()
  + set_annotations(annotations: Annotations)
  + save_annotations()
  + load_annotations()
  + draw_bboxes()
  + load_image()
  + rotate_image(angle)
  + plot() ?
  + to_array() ?
  + resize() ?
}

class Annotations {
  + location: Location
  + tags: list[str]
  + keywords: list[str]
  + detections: list[Detection]
  + rotation: int
'  + to_tensor()
'  + to_yolo_format()
'  + to_cvat_format()
  + set_location()
  + set_detections()
  + set_tags()
  + set_keywords()
}

class Location {
  + town: str
  + department: str
  + region: str
  + gps: tuple[float, float]
}
' detection.py

class "Detection" as Detection {
  + bbox: BoundingBox
  + is_manual : bool
  + confidence : float | None
  + content : Content | None
  + copy() -> Detection
  + isempty() -> bool
  + isprocessed() -> bool
  + get_content_cls() -> str
  + process_content(inplace: bool, **kwargs) -> Detection | None
  + rotate(theta: Orientation | int | float | str | None, inplace: bool) -> Detection | None
  + create_instance(coords: Sequence[float], content_class: str | None, is_manual: bool, confidence: float | None, coord_format: CoordFormat | str, img_size: Tuple[float, float] | None, content_dict: dict | None)
  + to_dict() -> dict
  + from_dict(data: dict) -> Detection
}

class "BoundingBox" as BoundingBox {
  + h: float
  + w: float
  + x: float
  + y: float
  + copy() -> BoundingBox
  + isclose(other: BoundingBox, rtol, atol) -> bool
  + isvalid(atol) -> bool
  + rotate(theta: Orientation | int | float | str | None, inplace: bool) -> BoundingBox | None
  + xywh(img_size: Tuple[int, int]) -> Tuple[float, float, float, float]
  + xywhn() -> Tuple[float, float, float, float]
  + xyxy(img_size: Tuple[int, int]) -> Tuple[float, float, float, float]
  + xyxyn() -> Tuple[float, float, float, float]
  + xxyy(img_size: Tuple[int, int]) -> Tuple[float, float, float, float]
  + xxyyn() -> Tuple[float, float, float, float]
  + to_dict() -> Dict[str, float]
  + from_dict(data: Dict[str, float]) -> BoundingBox
  + from_coords(coords: Sequence[float], coord_format: CoordFormat | str, img_size: Optional[Tuple[float, float]]) -> BoundingBox
  + to_coords(coord_format: CoordFormat | str, img_size: Optional[Tuple[int, int]]) -> Tuple[float, float, float, float]
}

enum "CoordFormat" as CoordFormat {
  XYWH: 'xywh'
  XYWHN: 'xywhn'
  XYXY: 'xyxy'
  XYXYN: 'xyxyn'
  XXYY: 'xxyy'
  XXYYN: 'xxyyn'
  + is_normalized() -> bool
}

' content.py

abstract class "Content" as Content {
  + confidence: float | None
  + is_manual: bool | None
  + copy() -> Content
  + get_cls_name() -> str
  + isprocessed() -> bool
  + to_dict() -> dict
  + from_dict(data: dict) -> Content
  + to_series() -> pd.Series
  + from_series(data) -> Content
  + create_instance(class_name: str | None, class_dict: dict | None) -> Content
  + to_json_object(full: bool = True) -> dict
  + from_json_object(json_object: dict | None = None) -> Content
  + process_content(confidence: float, inplace: bool) -> Content | None
  # _to_full_dict() -> dict
}

abstract class "Text" as Text {
  + ocr_result: str
  + keywords: Set[str] | List[str] | None
  + orientation: Orientation | int | float | str | None
  # _word_list: List[str]
  # _lemmas: List[str]
  + get_keywords() -> Set[str]
  + to_dict() -> dict
  + rotate(theta: Orientation | int | float | str | None, inplace: bool) -> Text | None
  + process_content(ocr_result: str, orientation: Orientation | int | float | str | None, confidence: float, inplace: bool) -> Text | None
  + word_list(preprocessing: Callable | None, inplace: bool, sep: LiteralString | None, maxsplit: SupportsIndex) -> Text | None
  + lemmatize(lemmatizer: Callable | None, preprocessing: Callable | None, inplace: bool, warn: bool) -> Text | None
  + set_keywords(ref_keywords: Set[str] | None, lemmatizer: Callable | None, preprocessing: Callable | None, inplace: bool, warn: bool) -> Text | None
  # _to_full_dict() -> dict
}

abstract class "Postmark" as Postmark {
  + ...
}

class "PrintedText" as PrintedText {
  + is_editor: bool
  + set_editor(is_editor: bool, inplace: bool) -> PrintedText | None
}

class "HandwrittenText" as HandwrittenText {
  + ...
}

class "SceneText" as SceneText {
  + ...
}

class "PostageStamp" as PostageStamp {
  + color: str | None
  + country: str
  + price: float | None
}

class "DateStamp" as DateStamp {
  + collection: str | None
  + date: DateISO8601 | str | None
  + department: str | None
  + mark_type: DateStampType | str
  + postal_agency: str | None
  + quality: DateStampQuality | str
  + starred_hour: bool
  + process_content(datestamp_dict: dict | None, inplace: bool)
  + to_dict() -> dict
  # _to_full_dict() -> dict
}

class "OtherMark" as OtherMark {
  + is_editor: bool
  + set_editor(is_editor: bool, inplace: bool) -> OtherMark | None
}

class "DateISO8601" as DateISO8601 {
  date_str: str | None
  {abstract}isvalid() -> bool
}
enum "DateStampQuality" as DateStampQuality {
  POOR: "poor"
  MEDIOCRE: "mediocre"
  GOOD: "good"
}
enum "DateStampType" as DateStampType {
  POST_OFFICE: "post office"
  AUXILIARY_OFFICE: "auxiliary post office"
  LINE_CONVEYOR: "line conveyor"
  DISTRIBUTION_OFFICE: "distribution office"
}
enum "Orientation" as Orientation {
  ZERO: 0
  NINETY: 90
  ONE_EIGHTY: 180
  TWO_SEVENTY: 270
  + from_input(theta: int | float | str | None) -> Orientation
}

' Relations
Collection <|-- CardCollection : hérite
CardCollection o--> "many" Postcard : contient
Postcard o--> "1" Annotations : contient
Annotations "1" o--> "1" Location : contient
Location --> PrintedText : utilise
Annotations "1" o--> "many" Detection : contient
Detection "1" *--> "1" BoundingBox : contient
BoundingBox --> Orientation : utilise
BoundingBox --> CoordFormat : utilise
Detection "1" o--> "1" Content : contient
Content <|-- Text : hérite
Text --> Orientation : utilise
Content <|-- Postmark : hérite
Text <|-- PrintedText : hérite
Text <|-- HandwrittenText : hérite
Text <|-- SceneText : hérite
Postmark <|-- PostageStamp : hérite
Postmark <|-- DateStamp : hérite
DateStamp --> DateISO8601 : utilise
DateStamp --> DateStampQuality : utilise
DateStamp --> DateStampType : utilise
Postmark <|-- OtherMark : hérite
@enduml